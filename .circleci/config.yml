# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build:
    docker:
      # specify the version
      - image: google/cloud-sdk:latest
        auth:
        #Put the contents of keyfile.json into an environment variable for the build called GCR_CREDS, which is then passed in.
          username: _json_key
          password: $GOOGLE_AUTH
      environment:
        GOPATH: /go
        GOBIN: /go/bin
        PATH: $PATH:$HOME/go/bin
    working_directory: /go/src/github.com/benbromhead/cassandra-operator
    steps:
      - run:
          name: Setup GO directories
          command: mkdir -p /go/src/github.com/benbromhead/
      - checkout
      - setup_remote_docker
      - run:
         name: Dump Google Cloud Credentials to file
         command: echo ${GOOGLE_AUTH} > ${HOME}/gcp-key.json
       - run:
         name: Setup Google Cloud
         command: gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json && gcloud --quiet config set project ${GOOGLE_PROJECT_ID} && gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
      - run:
          name: Install dependencies
          command: apt-get -y install golang docker
      - run:
          name: Install Glide
          command: curl https://glide.sh/get | sh
      - restore_cache:
          keys:
              - glide-cache-{{ checksum "glide.lock" }}
      - run:
          name: Install dependencies if not cached
          command: |
              if [ -d ./vendor ]; then
                  echo "vendor directory found"
              else
                  echo "vendor directory not found"
                  sudo apt-get install -y curl
                  curl https://glide.sh/get | sh
                  glide install
              fi
      - save_cache:
          key: glide-cache-{{ checksum "glide.lock" }}
          paths:
              - vendor
        # specify any bash command here prefixed with `run: `
      - run: go test -v ./test/e2e/ --kubeconfig "$HOME/.kube/config" --operator-image="$IMAGE"
workflows:
  version: 2
  build_and_test:
    jobs:
      - build